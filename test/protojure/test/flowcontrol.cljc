;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package protojure.test.flowcontrol
;;;----------------------------------------------------------------------------------
(ns protojure.test.flowcontrol
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->StreamOutRequest)
(declare ecis->StreamOutRequest)
(declare new-StreamOutRequest)
(declare cis->Payload)
(declare ecis->Payload)
(declare new-Payload)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; StreamOutRequest
;-----------------------------------------------------------------------------
(defrecord StreamOutRequest-record [count payload-size]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:count this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:payload-size this) os))
  pb/TypeReflection
  (gettype [this]
    "protojure.test.flowcontrol.StreamOutRequest"))

(s/def :protojure.test.flowcontrol.StreamOutRequest/count int?)
(s/def :protojure.test.flowcontrol.StreamOutRequest/payload-size int?)
(s/def ::StreamOutRequest-spec (s/keys :opt-un [:protojure.test.flowcontrol.StreamOutRequest/count :protojure.test.flowcontrol.StreamOutRequest/payload-size ]))
(def StreamOutRequest-defaults {:count 0 :payload-size 0 })

(defn cis->StreamOutRequest
  "CodedInputStream to StreamOutRequest"
  [is]
  (->> (tag-map StreamOutRequest-defaults
         (fn [tag index]
             (case index
               1 [:count (serdes.core/cis->Int32 is)]
               2 [:payload-size (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->StreamOutRequest-record)))

(defn ecis->StreamOutRequest
  "Embedded CodedInputStream to StreamOutRequest"
  [is]
  (serdes.core/cis->embedded cis->StreamOutRequest is))

(defn new-StreamOutRequest
  "Creates a new instance from a map, similar to map->StreamOutRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::StreamOutRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::StreamOutRequest-spec init))))]}
  (-> (merge StreamOutRequest-defaults init)
      (map->StreamOutRequest-record)))

(defn pb->StreamOutRequest
  "Protobuf to StreamOutRequest"
  [input]
  (cis->StreamOutRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record StreamOutRequest-meta {:type "protojure.test.flowcontrol.StreamOutRequest" :decoder pb->StreamOutRequest})

;-----------------------------------------------------------------------------
; Payload
;-----------------------------------------------------------------------------
(defrecord Payload-record [id data]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:id this) os)
    (serdes.core/write-Bytes 2  {:optimize true} (:data this) os))
  pb/TypeReflection
  (gettype [this]
    "protojure.test.flowcontrol.Payload"))

(s/def :protojure.test.flowcontrol.Payload/id int?)
(s/def :protojure.test.flowcontrol.Payload/data bytes?)
(s/def ::Payload-spec (s/keys :opt-un [:protojure.test.flowcontrol.Payload/id :protojure.test.flowcontrol.Payload/data ]))
(def Payload-defaults {:id 0 :data (byte-array 0) })

(defn cis->Payload
  "CodedInputStream to Payload"
  [is]
  (->> (tag-map Payload-defaults
         (fn [tag index]
             (case index
               1 [:id (serdes.core/cis->Int32 is)]
               2 [:data (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Payload-record)))

(defn ecis->Payload
  "Embedded CodedInputStream to Payload"
  [is]
  (serdes.core/cis->embedded cis->Payload is))

(defn new-Payload
  "Creates a new instance from a map, similar to map->Payload except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Payload-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Payload-spec init))))]}
  (-> (merge Payload-defaults init)
      (map->Payload-record)))

(defn pb->Payload
  "Protobuf to Payload"
  [input]
  (cis->Payload (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Payload-meta {:type "protojure.test.flowcontrol.Payload" :decoder pb->Payload})

