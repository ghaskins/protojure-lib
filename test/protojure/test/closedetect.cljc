;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package protojure.test.closedetect
;;;----------------------------------------------------------------------------------
(ns protojure.test.closedetect
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [com.google.protobuf :as com.google.protobuf]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->SubscribeRequest)
(declare ecis->SubscribeRequest)
(declare new-SubscribeRequest)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; SubscribeRequest
;-----------------------------------------------------------------------------
(defrecord SubscribeRequest-record [id]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:id this) os))
  pb/TypeReflection
  (gettype [this]
    "protojure.test.closedetect.SubscribeRequest"))

(s/def :protojure.test.closedetect.SubscribeRequest/id string?)
(s/def ::SubscribeRequest-spec (s/keys :opt-un [:protojure.test.closedetect.SubscribeRequest/id ]))
(def SubscribeRequest-defaults {:id "" })

(defn cis->SubscribeRequest
  "CodedInputStream to SubscribeRequest"
  [is]
  (->> (tag-map SubscribeRequest-defaults
         (fn [tag index]
             (case index
               1 [:id (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->SubscribeRequest-record)))

(defn ecis->SubscribeRequest
  "Embedded CodedInputStream to SubscribeRequest"
  [is]
  (serdes.core/cis->embedded cis->SubscribeRequest is))

(defn new-SubscribeRequest
  "Creates a new instance from a map, similar to map->SubscribeRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SubscribeRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SubscribeRequest-spec init))))]}
  (-> (merge SubscribeRequest-defaults init)
      (map->SubscribeRequest-record)))

(defn pb->SubscribeRequest
  "Protobuf to SubscribeRequest"
  [input]
  (cis->SubscribeRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record SubscribeRequest-meta {:type "protojure.test.closedetect.SubscribeRequest" :decoder pb->SubscribeRequest})

